// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(GarageContext))]
    [Migration("20201109182327_InititalCreate")]
    partial class InititalCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            Name = "Audi"
                        },
                        new
                        {
                            BrandId = 2,
                            Name = "BMW"
                        },
                        new
                        {
                            BrandId = 3,
                            Name = "Fiat"
                        },
                        new
                        {
                            BrandId = 4,
                            Name = "Renault"
                        },
                        new
                        {
                            BrandId = 5,
                            Name = "Skoda"
                        },
                        new
                        {
                            BrandId = 6,
                            Name = "Volkswagen"
                        });
                });

            modelBuilder.Entity("Core.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("DriverOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<int?>("ModelId")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CarId");

                    b.HasIndex("BrandId");

                    b.HasIndex("DriverOwnerId");

                    b.HasIndex("ModelId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            CarId = 1,
                            BrandId = 1,
                            LicenseNumber = "1-ABC-23",
                            ModelId = 1,
                            OwnerId = 1,
                            Status = "REGISTERED"
                        },
                        new
                        {
                            CarId = 2,
                            BrandId = 2,
                            LicenseNumber = "9-ZYX-87",
                            ModelId = 2,
                            OwnerId = 2,
                            Status = "REGISTERED"
                        },
                        new
                        {
                            CarId = 3,
                            BrandId = 3,
                            LicenseNumber = "6-XXX-66",
                            ModelId = 3,
                            OwnerId = 3,
                            Status = "REGISTERED"
                        },
                        new
                        {
                            CarId = 4,
                            BrandId = 4,
                            LicenseNumber = "AB-CD-12",
                            ModelId = 4,
                            OwnerId = 7,
                            Status = "REGISTERED"
                        },
                        new
                        {
                            CarId = 5,
                            BrandId = 5,
                            LicenseNumber = "98-ZY-XW",
                            ModelId = 5,
                            OwnerId = 8,
                            Status = "REGISTERED"
                        },
                        new
                        {
                            CarId = 6,
                            BrandId = 6,
                            LicenseNumber = "XD-XD-88",
                            ModelId = 6,
                            OwnerId = 9,
                            Status = "REGISTERED"
                        });
                });

            modelBuilder.Entity("Core.Models.MaintenanceSpecification", b =>
                {
                    b.Property<int>("MaintenanceSpecificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaintenanceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Milage")
                        .HasColumnType("int");

                    b.HasKey("MaintenanceSpecificationId");

                    b.HasIndex("CarId");

                    b.ToTable("MaintenanceSpecifications");

                    b.HasData(
                        new
                        {
                            MaintenanceSpecificationId = 1,
                            CarId = 1,
                            Date = new DateTime(2020, 11, 9, 19, 23, 27, 178, DateTimeKind.Local).AddTicks(6107),
                            Description = "Reparatie",
                            MaintenanceType = "REPAIR",
                            Milage = 1234567890
                        },
                        new
                        {
                            MaintenanceSpecificationId = 2,
                            CarId = 2,
                            Date = new DateTime(2020, 11, 9, 19, 23, 27, 182, DateTimeKind.Local).AddTicks(4592),
                            Description = "Reparatie",
                            MaintenanceType = "REPAIR",
                            Milage = 1234567890
                        },
                        new
                        {
                            MaintenanceSpecificationId = 3,
                            CarId = 3,
                            Date = new DateTime(2020, 11, 9, 19, 23, 27, 182, DateTimeKind.Local).AddTicks(4740),
                            Description = "Reparatie",
                            MaintenanceType = "REPAIR",
                            Milage = 1234567890
                        },
                        new
                        {
                            MaintenanceSpecificationId = 4,
                            CarId = 4,
                            Date = new DateTime(2020, 11, 9, 19, 23, 27, 182, DateTimeKind.Local).AddTicks(4744),
                            Description = "APK",
                            MaintenanceType = "MOT",
                            Milage = 1234567890
                        },
                        new
                        {
                            MaintenanceSpecificationId = 5,
                            CarId = 5,
                            Date = new DateTime(2020, 11, 9, 19, 23, 27, 182, DateTimeKind.Local).AddTicks(6189),
                            Description = "APK",
                            MaintenanceType = "MOT",
                            Milage = 1234567890
                        },
                        new
                        {
                            MaintenanceSpecificationId = 6,
                            CarId = 6,
                            Date = new DateTime(2020, 11, 9, 19, 23, 27, 182, DateTimeKind.Local).AddTicks(6226),
                            Description = "APK",
                            MaintenanceType = "MOT",
                            Milage = 1234567890
                        });
                });

            modelBuilder.Entity("Core.Models.Model", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModelId");

                    b.HasIndex("BrandId");

                    b.ToTable("Models");

                    b.HasData(
                        new
                        {
                            ModelId = 1,
                            BrandId = 1,
                            Name = "A4"
                        },
                        new
                        {
                            ModelId = 2,
                            BrandId = 2,
                            Name = "M6"
                        },
                        new
                        {
                            ModelId = 3,
                            BrandId = 3,
                            Name = "Punto"
                        },
                        new
                        {
                            ModelId = 4,
                            BrandId = 4,
                            Name = "Clio"
                        },
                        new
                        {
                            ModelId = 5,
                            BrandId = 5,
                            Name = "Superb"
                        },
                        new
                        {
                            ModelId = 6,
                            BrandId = 6,
                            Name = "Golf"
                        });
                });

            modelBuilder.Entity("Core.Models.Owner", b =>
                {
                    b.Property<int>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OwnerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("OwnerId");

                    b.ToTable("Owners");

                    b.HasData(
                        new
                        {
                            OwnerId = 1,
                            City = "Deventer",
                            Email = "jelleschut@hotmail.com",
                            HouseNumber = 77,
                            Name = "Jelle Schut",
                            OwnerType = "CUSTOMER",
                            PhoneNumber = "0657013971",
                            Street = "Keizer Frederikstraat",
                            Zipcode = "7415KC"
                        },
                        new
                        {
                            OwnerId = 2,
                            City = "Deventer",
                            Email = "jelleschut@hotmail.com",
                            HouseNumber = 77,
                            Name = "Fred Flintstone",
                            OwnerType = "CUSTOMER",
                            PhoneNumber = "0657013971",
                            Street = "Keizer Frederikstraat",
                            Zipcode = "7415KC"
                        },
                        new
                        {
                            OwnerId = 3,
                            City = "Deventer",
                            Email = "jelleschut@hotmail.com",
                            HouseNumber = 77,
                            Name = "Sjaak Swart",
                            OwnerType = "CUSTOMER",
                            PhoneNumber = "0657013971",
                            Street = "Keizer Frederikstraat",
                            Zipcode = "7415KC"
                        },
                        new
                        {
                            OwnerId = 4,
                            City = "Deventer",
                            Email = "jelleschut@hotmail.com",
                            HouseNumber = 77,
                            Name = "Pietje Puk",
                            OwnerType = "CUSTOMER",
                            PhoneNumber = "0657013971",
                            Street = "Keizer Frederikstraat",
                            Zipcode = "7415KC"
                        },
                        new
                        {
                            OwnerId = 5,
                            City = "Deventer",
                            Email = "jelleschut@hotmail.com",
                            HouseNumber = 77,
                            Name = "Michael Schumacher",
                            OwnerType = "CUSTOMER",
                            PhoneNumber = "0657013971",
                            Street = "Keizer Frederikstraat",
                            Zipcode = "7415KC"
                        },
                        new
                        {
                            OwnerId = 6,
                            City = "Deventer",
                            Email = "jelleschut@hotmail.com",
                            HouseNumber = 77,
                            Name = "Johan Cruijff",
                            OwnerType = "CUSTOMER",
                            PhoneNumber = "0657013971",
                            Street = "Keizer Frederikstraat",
                            Zipcode = "7415KC"
                        },
                        new
                        {
                            OwnerId = 7,
                            City = "SomeCity",
                            HouseNumber = 1,
                            Name = "SomeCompany",
                            OwnerType = "LEASECOMPANY",
                            Street = "SomeStreet",
                            Zipcode = "1234AB"
                        },
                        new
                        {
                            OwnerId = 8,
                            City = "OtherCity",
                            HouseNumber = 1,
                            Name = "OtherCompany",
                            OwnerType = "LEASECOMPANY",
                            Street = "OtherStreet",
                            Zipcode = "4321XZ"
                        },
                        new
                        {
                            OwnerId = 9,
                            City = "ThirdCity",
                            HouseNumber = 1,
                            Name = "ThirdCompany",
                            OwnerType = "LEASECOMPANY",
                            Street = "ThirdStreet",
                            Zipcode = "0987TX"
                        });
                });

            modelBuilder.Entity("Core.Models.Car", b =>
                {
                    b.HasOne("Core.Models.Brand", "Brand")
                        .WithMany("Cars")
                        .HasForeignKey("BrandId");

                    b.HasOne("Core.Models.Owner", "Driver")
                        .WithMany("CarDrivers")
                        .HasForeignKey("DriverOwnerId");

                    b.HasOne("Core.Models.Model", "Model")
                        .WithMany("Cars")
                        .HasForeignKey("ModelId");

                    b.HasOne("Core.Models.Owner", "Owner")
                        .WithMany("CarOwners")
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("Core.Models.MaintenanceSpecification", b =>
                {
                    b.HasOne("Core.Models.Car", "Car")
                        .WithMany("MaintenanceSpecifications")
                        .HasForeignKey("CarId");
                });

            modelBuilder.Entity("Core.Models.Model", b =>
                {
                    b.HasOne("Core.Models.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId");
                });
#pragma warning restore 612, 618
        }
    }
}
